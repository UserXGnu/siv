; -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
;
; asm_fnc.masm
; Copyright (C) 2017 Victor Flores a.k.a UserX <user_x@riseup.net>
;
; asm_fnc.masm is part of a free software: you can redistribute it and/or modify it
; under the terms of the GNU General Public License as published by the
; Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; png_visualizer is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License along
; with this program.  If not, see <http://www.gnu.org/licenses/>.
;/

PUBLIC asm_fnc1
PUBLIC asm_fnc2
PUBLIC asm_fnc3
PUBLIC asm_fnc4
PUBLIC asm_fnc5

; @note:
;	 once that jwasm doesn't offer support for 
;	 POSIX System V ABI calling convention for
;	 x86_64 systems,I created these macros to 
;	 adjust the parameters for our procedures.
args_assign MACRO 
	mov dword ptr [rbp+20h], edx
	mov dword ptr [rbp+18h], esi
	mov qword ptr [rbp+10h], rdi
ENDM

; in case of using x, y as parameters to locate some specific pixel
args_assign2 MACRO 
	mov 	rax, r8
	mov 	dword ptr [rbp+30h], eax
	mov 	dword ptr [rbp+28h], ecx
	mov 	dword ptr [rbp+20h], edx
	mov 	dword ptr [rbp+18h], rsi
	mov 	qword ptr [rbp+10h], rdi
	xor 	rax, rax
ENDM

; prototypes
asm_fnc1 proto c pixels: ptr byte, lns: dword, cols: dword 
asm_fnc2 proto c pixels: ptr byte, lns: dword, cols: dword 
asm_fnc3 proto c pixels: ptr byte, lns: dword, cols: dword 
asm_fnc4 proto c pixels: ptr byte, lns: dword, cols: dword 
asm_fnc5 proto c pixels: ptr byte, lns: dword, cols: dword 

.code
asm_fnc1 proc c uses rbx pixels: ptr byte, lns: dword, cols: dword
	LOCAL channels: dword
 	args_assign 
	
	mov 	[channels], 03h

	mov   	eax, cols
	mul 	lns
	jo 		fim

	mov 	rbx, rax
	xor 	ecx, ecx
	mov 	rdi, pixels
	.while (ecx < ebx)
		movzx 	eax, byte ptr [rdi + rcx]      ; red channel
		movzx 	edx, byte ptr [rdi + rcx + 1]  ; green channel
		add 	eax, edx
		movzx 	edx, byte ptr [rdi + rcx + 2]  ; blue channel
		add 	eax, edx
		xor 	rdx, rdx
		div 	channels

		mov 	byte ptr [rdi + rcx], al
		mov 	byte ptr [rdi + rcx + 1], al
		mov 	byte ptr [rdi + rcx + 2], al
		add 	ecx, 03h
	.endw

	fim:
		xor 	eax, eax
		ret
asm_fnc1 endp

asm_fnc2 proc c pixels: ptr byte, lns: dword, cols: dword 
 	args_assign  
 	; TODO ...
	ret
asm_fnc2 endp

asm_fnc3 proc c pixels: ptr byte, lns: dword, cols: dword 
 	args_assign  
	; TODO ...
	ret
asm_fnc3 endp

asm_fnc4 proc c pixels: ptr byte, lns: dword, cols: dword 
 	args_assign  
	; TODO ...
	ret 
asm_fnc4 endp

asm_fnc5 proc c pixels: ptr byte, lns: dword, cols: dword 
 	args_assign  
	; TODO ...
	ret 
asm_fnc5 endp

END
